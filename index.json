[{"content":"使用cron记得调整本地时间与预期时区，一般的国外VPS都是美国时区，你要想在中国时间运行，你得修改localtime 的时区为Asia/Shanghai\n1. 查看VPS时间，最后的+0800就是时区。 # date -R Mon, 27 Feb 2012 17:32:07 +0800\n一般来说时间有误的VPS都不在东八区，所以如果发现你的VPS时区不对，首先要做的就是校正时区 （如果VPS是xen的就需要先执行 echo 1 \u0026gt; /proc/sys/xen/independent_wallclock）\n2. 校正时区 # rm -rf /etc/localtime # ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\n校正之后再date -R一次，如果时间对了那就OK了（通常情况openvz VPS只要修改时区就可以），反之继续同步时间。\n如果您想手动修改/etc/localtime文件来更改时区设置，请按照以下步骤进行操作：\n打开终端并以root用户身份登录。\n备份当前的/etc/localtime文件，以防止意外更改。可以使用以下命令进行备份：\n1 sudo cp /etc/localtime /etc/localtime.bak 确定您想要设置的时区文件的路径。在中国，通常使用/usr/share/zoneinfo/Asia/Shanghai作为时区文件。您可以根据自己所在的城市选择相应的路径。例如，如果您在北京，可以使用/usr/share/zoneinfo/Asia/Shanghai。\n使用以下命令将所选的时区文件复制到/etc/localtime：\n1 sudo cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime 完成后，您可以验证时区设置是否已更改。可以运行以下命令来检查：\n1 date 如果时区设置已正确更改，输出的时间和时区应与您所选择的城市相匹配。\n请注意，手动修改/etc/localtime文件是一种更改时区设置的方法，但并不是官方推荐的方式。使用官方提供的工具如dpkg-reconfigure来更改时区设置更为可靠和推荐。如果您之前尝试使用dpkg-reconfigure命令时未能成功更改时区，可能还有其他问题存在，建议仔细检查和排除其他可能的原因。\n","permalink":"http://localhost:1313/posts/techs/%E4%BD%BF%E7%94%A8cron%E8%87%AA%E5%8A%A8%E5%8C%96%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E4%BA%8B/","summary":"使用cron记得调整本地时间与预期时区，一般的国外VPS都是美国时区，你要想在中国时间运行，你得修改localtime 的时区为Asia/Sh","title":"使用cron自动化需要注意的事"},{"content":"在 Debian 12 上安装 MariaDB 10.11 1.在终端中运行下述命令更新系统：\n1 sudo apt update \u0026amp;\u0026amp; sudo apt upgrade 2.在终端中运行下述命令安装MariaDB 10.11：\n1 sudo apt install mariadb-server 3.完成后可以在终端输入下述命令查看版本：\n1 mariadb --version 4.在终端中运行下述命令进行安全设置：\n1 mysql_secure_installation 5.终端会相继出现如下提示，按需要选择，也可以一路选择 Y ：\n1 2 3 4 5 Set root password? [Y/n] y #这里会要求输入密码 Remove anonymous users? [Y/n] y Disallow root login remotely? [Y/n] y Remove test database and access to it? [Y/n] y Reload privilege tables now? [Y/n] y 6.完成上述选项，MariaDB 10.11 即已安装完成，而且通常情况下已经自动启动。也可以在终端运行如下命令启动：\n1 sudo systemctl start mariad 7.在终端中运行下述命令连接 MariaDB，或通过第三方工具连接：\n1 mysql -u root -p 按提示输入密码即可连接。\n","permalink":"http://localhost:1313/posts/techs/debian12%E5%AE%89%E8%A3%85mariadb_10.11/","summary":"在 Debian 12 上安装 MariaDB 10.11 1.在终端中运行下述命令更新系统： 1 sudo apt update \u0026amp;\u0026amp; sudo apt upgrade 2.在终端中运行下述命令安装MariaDB 10.11： 1 sudo apt install mariadb-server 3.完成后","title":"Debian12安装MariaDB_10.11"},{"content":"自从2016年入坑了新海诚的第一部电影，《你的名字》之后，对于新海诚的电影我是一部不落的看完了，2016年那部划时代的作品，《你的名字》实属让我印象深刻，第一遍看的时候没看明白，在后来的几年中陆陆续续看了不下三遍，最后看明白了，新海诚作为细节狂魔这件事是真的离谱。\n中间2019年的天气之子，由于一些原因没能看到首映，后面在家里补看了真·4K蓝光原盘，之后，对于2022年的新电影更是憧憬，但是由于一些原因，新海诚的电影从2022推迟到了2023，但是这并不影响我还是想去看的心，而今年，有幸邀请到了一个傻der一起去看。\n以下是无意（或许是有意的呢？）拍到的图片：\n当事人表示不让，但是我在无意间(一定是无意间拍到的)拍到了一张当事人!\n此时在等待检票ing\n终于开始了，是新海诚的新电影！\n画质还是那么惊艳\n不过全篇中男主真身出场的戏份太少了，建议改名为你的名字续作·你的椅子\n写在最后：\n蚓厄，往界，废墟，地震这些东西。按我的理解就是，经历过的，不管好的坏的事情，都会留下痕迹，这些东西都是有能量的。积攒多了，就爆发了。所以人跟着时间不停前进的同时，应该也把这些东西处理好，消化好，停止内耗。锁上门，走出去。\nすずめ直译的意思是麻雀，人类在自然灾害面前渺小如麻雀，你的名字面对灾难选择了去改变未来，天气之子面对灾难重新选择了人生，而到了铃芽是接受现实，面对灾难。缅怀逝者，带着希望好好活下去，就像铃芽对小铃芽所说的“未来并不可怕”这应该就是新海导想表达的吧，希望我们每个人都能主动去迎接明天！\n以前看诚哥的电影总觉得主角的爱情来的突然来的草率 现在才知道爱情就是突如其来不讲道理的 喜欢的人都是突然遇见的\n电影看完了，最后的独白像是在告诫我，一切都到放下的时候了，好好生活，会更好的，自己也会成为更好的人\n2022《铃芽户缔》 2019《天气之子》 2016《你的名字》 2013《言叶之庭》 2011《追逐繁星的孩子》 2007《秒速5厘米》 2004《云的彼端，约定的地方》 感谢诚哥的陪伴！\n","permalink":"http://localhost:1313/posts/life/%E6%96%B0%E6%B5%B7%E8%AF%9A%E7%9A%84%E4%B8%89%E5%B9%B4%E4%B9%8B%E7%BA%A6-%E9%93%83%E8%8A%BD%E4%B9%8B%E6%97%85/","summary":"自从2016年入坑了新海诚的第一部电影，《你的名字》之后，对于新海诚的电影我是一部不落的看完了，2016年那部划时代的作品，《你的名字》实属","title":"新海诚的三年之约 铃芽之旅"},{"content":"一）ACME安装 1 curl https://get.acme.sh | sh 安装程序会自动做以下操作：\n自动把 acme.sh 安装到你的 home 的.acme.sh目录下，即~/.acme.sh/ 自动创建一个 bash 的 alias, 方便你的使用: alias acme.sh=~/.acme.sh/acme.sh 自动为你创建 cronjob, 每天 0:00 点自动检测所有的证书, 如果快过期了, 需要更新, 则会自动更新证书. （二）更改默认证书机构 1 acme.sh --set-default-ca --server letsencrypt acme被ZeroSSL收购，其默认的证书方式为ZeroSSL，但此证书生成时会携带邮箱，因此更换为letsencrypt。\n当然，也可以在生成证书时加一个--server参数来决定生成什么证书\n1 --server letsencrypt （三）生成证书 使用acme.sh --issue命令生成证书，但生成证书的同时会进行域名的所有权的验证。 acme.sh 有两种方式验证：http 和 dns 验证。\n注意：如果需要生成泛域名（*.a.com）的证书，不能使用HTTP认证域名，需要改用DNS认证的方式\nDNS 验证方式（推荐,手动也可，但是作者不想手动.jpg） 需要在域名上添加一条 txt 解析记录, 验证域名所有权\n方式1：手动添加记录 a. 生成txt解析内容\n1 2 acme.sh --issue --dns -d mydomain.com \\ --yes-I-know-dns-manual-mode-enough-go-ahead-please 以上mydomain.com只是测试域名，如果多个域名，则需多次使用-d配置，如-d www.a.com -d img.a.com\nb. 把txt解析添加到域名管理面板中\nc. 重新生成证书\n1 2 acme.sh --renew -d mydomain.com \\ --yes-I-know-dns-manual-mode-enough-go-ahead-please 注意，重新生成使用的是renew参数，把生成txt解析内容命令的issue改为renew\n方式2：域名提供商api自动解析 dns 方式的真正强大之处在于可以使用域名解析商提供的 api 自动添加 txt 记录完成验证.\na. 在域名提供商中，生成你的 api id 和 api key并记录\nb. 引入api id和key，以dnspod为例\n1 2 export DP_Id=\u0026#34;1234\u0026#34; export DP_Key=\u0026#34;sADDsdasdgdsf\u0026#34; 不同提供商，API参数值各不同，可参考下面的表格：自动 DNS API 集成\nc. 生成证书\n1 acme.sh --issue --dns dns_dp -d aa.com -d www.aa.com --dns的配置值也是根据域名提供商来决定，dns_dp表示dnspod。更多参数值可看下方表格\n表：自动 DNS API 集成\n服务商名称 服务商简称 所需API参数 获取API参数地址 cloudxns cx export CX_Key=\u0026quot;123456\u0026quot; export CX_Secret=\u0026quot;abcdef\u0026quot; 点击访问 dnspod.cn dp export DP_Id=\u0026quot;123456\u0026quot; export DP_Key=\u0026quot;abcdef\u0026quot; 点击访问 aliyun ali export Ali_Key=\u0026quot;123456\u0026quot; export Ali_Secret=\u0026quot;abcdef\u0026quot; 点击访问 cloudflare cf export CF_Key=\u0026quot;123456\u0026quot; export CF_Email=\u0026quot;abc@example.com\u0026quot; 点击访问 linode linode export LINODE_API_KEY=\u0026quot;123456\u0026quot; 点击访问 he he export HE_Username=\u0026quot;username\u0026quot; export HE_Password=\u0026quot;password\u0026quot; he的用户名密码 digitalocean dgon export DO_API_KEY=\u0026quot;123456\u0026quot; 点击访问 namesilo namesilo export Namesilo_Key=\u0026quot;123456\u0026quot; 点击访问 aws aws export AWS_ACCESS_KEY_ID=123456 export AWS_SECRET_ACCESS_KEY=abcdef 点击访问 namecom namecom export Namecom_Username=\u0026quot;username\u0026quot; export Namecom_Token=\u0026quot;123456\u0026quot; 点击访问 freedns freedns export FREEDNS_User=\u0026quot;username\u0026quot; export FREEDNS_Password=\u0026quot;password\u0026quot; freedns的用户名密码 godaddy gd export GD_Key=\u0026quot;123456\u0026quot; export GD_Secret=\u0026quot;abcdef\u0026quot; 点击访问 yandex yandex export PDD_Token=\u0026quot;abcdef\u0026quot; 点击访问 更多dnsapi的使用，可以查看文档\n（四）copy/安装 证书 默认生成的证书都放在安装目录下: ~/.acme.sh/，但是不要在web服务器中直接引用目录下的证书文件，也不要手动来拷贝证书文件到具体的web服务器中，手动拷贝会导致之后更新证书流程不能完全自动。\n正确方式是使用acme.sh的安装证书命令，acme.sh自动拷贝证书文件到具体目录中，拷贝命令会被记录下来，之后自动更新证书流程也会执行此拷贝步骤，从而实现更新证书流程的完全自动化。\n格式例子如下：\n1 2 3 4 5 acme.sh --install-cert -d xxx \\ --cert-file xxx \\ --key-file xxx \\ --fullchain-file xxx\\ --reloadcmd xxx 根据web服务器需要的文件按需引入对应的参数，reloadcmd定义证书更新后重启对应的web服务命令。\n以nginx为例：\n1 2 3 4 acme.sh --install-cert -d www.a.com -d img.a.com \\ --key-file /etc/nginx/cert_file/key.pem \\ --fullchain-file /etc/nginx/cert_file/fullchain.pem \\ --reloadcmd \u0026#34;service nginx force-reload\u0026#34; （五）web服务使用证书 通过上一步安装证书，已经把证书拷贝到目标的目录，接下来就是在web服务中使用证书即可。\n以nginx为例：\n1 2 3 4 5 6 7 ... server { listen 443 ssl; ssl_certificate /etc/nginx/cert_file/fullchain.pem; ssl_certificate_key /etc/nginx/cert_file/key.pem; # ... } 更新证书 目前证书在 60 天以后会自动更新，你无需任何操作，因为在acme.sh安装时，已经把相关的自动更新程序写入到crontab中，如果想要查看，可以通过以下命令：\n1 crontab -l 输出内容包含一个自动更新程序，大致内容如下：\n1 56 * * * * \u0026#34;/root/.acme.sh\u0026#34;/acme.sh --cron --home \u0026#34;/root/.acme.sh\u0026#34; \u0026gt; /dev/null 停止自动更新 1 acme.sh --remove -d example.com 或者手动在~/.acme.sh/目录下删除对应的域名目录，如~/.acme.sh/a.com。\n","permalink":"http://localhost:1313/posts/life/%E4%BD%BF%E7%94%A8acme.sh%E7%94%B3%E8%AF%B7%E5%B9%B6%E8%87%AA%E5%8A%A8%E7%BB%AD%E6%9C%9Fssl%E8%AF%81%E4%B9%A6/","summary":"一）ACME安装 1 curl https://get.acme.sh | sh 安装程序会自动做以下操作： 自动把 acme.sh 安装到你的 home 的.acme.sh目录下，即~/.acme.sh/ 自动创建一个 bash 的 alias,","title":"使用acme.sh申请并自动续期SSL证书"},{"content":"RSA 算法和 ECC 加密算法的SSL证书区别对比\nRSA算法和ECC算法是目前流行的主要的两种 SSL证书公钥加密算法。\n当然还有刚刚兴起的国密SM2加密算法，但由于国密算法的 SSL证书目前仅仅两三款浏览器支持，且需要相应的服务器环境支持，所以本文不做过多介绍。\n**RSA算法：**比较常见的算法，应用较早，为普及，比 ECC算法的适用范围更广，兼容性很好，一般采用 2048 位的加密长度，但是对服务端性能消耗高。\n**ECC算法：**中文名称为椭圆加密算法，新一代算法趋势主流，一般采用 256 位加密长度，加密速度快，效率更高，对服务器资源消耗低，而且重要的是更安全，抗攻击型更强。\n","permalink":"http://localhost:1313/posts/life/rsa%E7%AE%97%E6%B3%95%E5%92%8Cecc%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E7%9A%84ssl%E8%AF%81%E4%B9%A6%E5%8C%BA%E5%88%AB%E5%AF%B9%E6%AF%94/","summary":"RSA 算法和 ECC 加密算法的SSL证书区别对比 RSA算法和ECC算法是目前流行的主要的两种 SSL证书公钥加密算法。 当然还有刚刚兴起的国密SM2加密算","title":"RSA算法和ECC加密算法的SSL证书区别对比"},{"content":"在终端直接输入hugo server -D就可以在本地预览了，本地预览网址为 localhost:1313， 输入hugo就可以生成public文件夹，这个文件夹可以部署到云服务器或者托管到github上， 注意：输入hugo的生成方式只会往public文件夹里添加内容，但是不会删除外部已经不存在而public里面还存在的文件， 所以我一般用hugo -F \u0026ndash;cleanDestinationDir命令，表示每次生成的public都是全新的，会覆盖原来的。\n","permalink":"http://localhost:1313/posts/techs/hugo%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/","summary":"在终端直接输入hugo server -D就可以在本地预览了，本地预览网址为 localhost:1313， 输入hugo就可以生成public文件夹，这个文","title":"Hugo折腾记录"},{"content":"格式化 格式化是许多开发人员在协作时，特别是在跨平台情况下，遇到的令人头疼的细小问题。 由于编辑器的不同或者Windows程序员在跨平台项目中的文件行尾加入了回车换行符， 一些细微的空格变化会不经意地进入大家合作的工作或提交的补丁中。不用怕，Git的一些配置选项会帮助你解决这些问题。\ncore.autocrlf 假如你正在Windows上写程序，又或者你正在和其他人合作，他们在Windows上编程，而你却在其他系统上，在这些情况下，你可能会遇到行尾 结束符问题。 这是因为Windows使用回车和换行两个字符来结束一行，而Mac和Linux只使用换行一个字符。 虽然这是小问题，但它会极大地扰乱跨平台协作。\n在Windows平台上，git默认的core.autocrlf是true，可以通过git config --list命令查看。\nGit可以在你提交时自动地把行结束符CRLF转换成LF，而在签出代码时把LF转换成CRLF。用core.autocrlf来打开此项功能， 如果是在Windows系统上，把它设置成true（默认配置），这样当签出代码时，LF会被转换成CRLF：\n1 Copy$ git config --global core.autocrlf true Linux或Mac系统使用LF作为行结束符，因此你不想Git在签出文件时进行自动的转换；当一个以CRLF为行结束符的文件不小心被引入时你肯定想进行修正， 把core.autocrlf设置成input来告诉Git在提交时把CRLF转换成LF，签出时不转换：\n1 Copy$ git config --global core.autocrlf input 这样会在Windows系统上的签出文件中保留CRLF，会在Mac和Linux系统上，包括仓库中保留LF。\n如果你是Windows程序员，且正在开发仅运行在Windows上的项目，可以设置false取消此功能，把回车符记录在库中：\n1 Copy$ git config --global core.autocrlf false 关于在IDEA中的提示，如下图所示，点击FIX AND COMMIT即可。 ","permalink":"http://localhost:1313/posts/life/git-core.autocrlf%E9%85%8D%E7%BD%AE%E8%AF%B4%E6%98%8E/","summary":"格式化 格式化是许多开发人员在协作时，特别是在跨平台情况下，遇到的令人头疼的细小问题。 由于编辑器的不同或者Windows程序员在跨平台项目中的","title":"Git Core.autocrlf配置说明"},{"content":"当你在Windows下搭建hugo时你必须首先将git配置中的自动切换改为false，如果不调整该项，你通过Windows上传的hugo到github pages将会样式不对，即使你在本地预览的是正确的主题，你应当在操作之前使用：git config core.autocrlf false。\n至于为什么，详情见另外一文 《git core.autocrlf配置说明》\n","permalink":"http://localhost:1313/posts/life/hugo%E5%A4%87%E4%BB%BD%E4%BB%A5%E5%8F%8A%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/","summary":"当你在Windows下搭建hugo时你必须首先将git配置中的自动切换改为false，如果不调整该项，你通过Windows上传的hugo到g","title":"Hugo备份以及遇到的问题"},{"content":"This is a testing web page.\n这是一个测试页面，还没想好要写什么。\n","permalink":"http://localhost:1313/about/","summary":"This is a testing web page. 这是一个测试页面，还没想好要写什么。","title":"About"}]